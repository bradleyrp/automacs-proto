#!/usr/bin/python

#---PATH SETTINGS
#-------------------------------------------------------------------------------------------------------------

#---defaults for running the script locally
local_nprocs = 4
local_processor_type = ['standard','gpu'][0]

#---regex list for files to remove
patlist = ['\.?\/?.+\.'+i+'$' for i in 
	['itp','top','mdp','tpr','xtc','trr','gro','edr','log','cpt','ndx',
		'dat','pdb','jpeg','jpg','pl','sh','png','ali','py','txt']]+\
	['^gmxpaths','^gmxcalls','^gmxjob','^cluster-','^\#.+\#$','^script-','^log-','^em-all-','^step-']
	
#---ignore reset delete candidates 
whitelist = ['^\.?\/?(docs|amx|sources/|inputs|controller)','^\.*\/*\.[^\/]','controller']

#---all folders are deleted only when empty except if they match the folder delete regex
folder_delete = ['^\.?\/?.+(homology)']

#---gromacs paths
standard_gromacs_commands = [
	'mdrun','grompp','tpbconv','editconf','genbox','make_ndx','genion',
	'trjconv','gmxcheck','pdb2gmx','genconf',
	]

#---system-specific commands to substitute for standard_gromacs_commands
#---note some commands require a number of processors NPROCS which is substituted by ./controller make
gmx_overrides = {
	'cluster_hostname':{'mdrun':'mpirun -np NPROCS mdrun_mpi',},
	'local':{
		'standard':{'mdrun':'mdrun -nt '+str(local_nprocs),},
		'gpu':{'mdrun':'mdrun -nb gpu_cpu -nt '+str(local_nprocs),},
		}[local_processor_type],
	}
	
#---convert gromacs 4 commands to gromacs 5
gmx_syntax5 = dict([(key,'gmx '+key) for key in standard_gromacs_commands])
special_keys5 = {'genbox':'gmx solvate','tpbconv':'gmx convert-tpr'}
for key in special_keys5: gmx_syntax5[key] = special_keys5[key]

#---paths to extra tools
#---set paths to DSSP executable and martinize.py for MARTINI protein simulations from scratch
tool_paths = {
	'dssp':'~/libs/dssp-2.0.4-linux-amd64',
	'martinize':'~/libs/martinize.py',
	'modeller':'mod9.15',
	'vmd':'vmd',
	}
	
#---BASH SCRIPT CONSTANTS
#-------------------------------------------------------------------------------------------------------------

#---bash commands referenced in script_dict are recorded here
#---note that "preps" lists contain bash commands to copy general steps and connect the steps
#---note that "scripts" lists contain bash commands to run the steps in sequence

prepare_equil_sim = [
"""
#---copy equilibration files
if ! [ -d "$step_equilibration" ]; then 
cp -r ./sources/general-equil ./$step_equilibration
cp ./sources/general-sim/script-sim.pl ./$step_equilibration/
else 
cp -r ./sources/general-equil/* ./$step_equilibration
cp ./sources/general-sim/script-sim.pl ./$step_equilibration/
fi\n
#---connect equilibration settings to the previous step
sed -i 's/^SOURCEDIR.*/SOURCEDIR=\.\.\/'$step_build'/g' $step_equilibration/settings.sh
sed -i 's/^MDPLOOK.*/MDPLOOK='$mdp_look_string'/g' $step_equilibration/settings.sh
sed -i 's/^SPECSFILE.*/SPECSFILE='$specs_file'/g' $step_equilibration/settings.sh
sed -i 's/cp $AMXPATH\/.*/cp $AMXPATH\/'$input_files'\/\* \.\//g' $step_equilibration/settings.sh
""",
"""
#---copy simulation continuation files
if ! [ -d "$step_simulation" ]; then cp -r ./sources/general-sim ./$step_simulation
else cp -r ./sources/general-sim/* ./$step_simulation;fi\n
#---connect simulation settings to the previous step
sed -i 's/^SOURCEDIR.*/SOURCEDIR=\.\.\/'$step_equilibration'/g' $step_simulation/settings.sh
sed -i 's/^MDPLOOK.*/MDPLOOK='$mdp_look_string'/g' $step_simulation/settings.sh
sed -i 's/^SPECSFILE.*/SPECSFILE='$specs_file'/g' $step_simulation/settings.sh
sed -i 's/cp $AMXPATH\/.*/cp $AMXPATH\/'$input_files'\/\* \.\//g' $step_simulation/settings.sh
""",
]

prepare_restart = [
"""
#---copy simulation continuation files
mkdir ./$step_simulation
cp -r ./sources/general-sim-restart/* ./$step_simulation;
cp -r ./repo/* ./$step_simulation;
#---if detect_previous_step is set in the header then copy checkpoint files
#---...note that we use the prep scripts in a self-contained way, to avoid excessive python code
if ! [ -z "${detect_previous_step+xxx}" ]; then 
#---locate the latest checkpoint from the equilibrate folder
THISDIR=$(pwd)
cd $detect_previous_step
PRUN=0
for file in md.part*.cpt
do
	if [ $(echo ${file:7:4} | sed 's/^0*//') -gt $PRUN ]; then 
		PRUN=$(echo ${file:7:4} | sed 's/^0*//')
	fi
done
cd $THISDIR
#---copy checkpoint and input files
cp $detect_previous_step/$(printf md.part%04d.tpr $PRUN) ./$step_simulation/
cp $detect_previous_step/$(printf md.part%04d.cpt $PRUN) ./$step_simulation/
fi
"""
]

prepare_rescript = [
"""
sed -i 's/^STOPHOURS.*/STOPHOURS=\"'$walltime'\"/g' $detect_previous_step/settings.sh
"""
]

prepare_multiply = [
"""
#---copy simulation continuation files
mkdir ./$step_simulation
cp -r ./sources/general-sim-restart/* ./$step_simulation;
"""
]

call_equil = """#---execute equilibration step
cd $step_equilibration
echo "moved to "$step_equilibration", "$(pwd)
./script-equilibrate.pl
if [[ $(tail log-script-master) =~ fail$ ]];then exit;fi
cd ..
\n"""

call_sim = """#---execute simulation (continuation) step
cd $step_simulation
./script-sim.pl
if [[ $(tail log-script-master) =~ fail$ ]];then exit;fi
cd ..
\n"""

call_sim_restart = """#---execute simulation restart step
cd $step_simulation
./script-sim-restart.pl
./script-sim.pl
if [[ $(tail log-script-master) =~ fail$ ]];then exit;fi
cd ..
\n"""

call_sim_rescript = """#---execute simulation restart step
cd $detect_previous_step
./script-sim.pl
if [[ $(tail log-script-master) =~ fail$ ]];then exit;fi
cd ..
\n"""

call_sim_multiply = """#---execute simulation restart step
cd $step_simulation
./script-sim-restart.pl
if [[ $(tail log-script-master) =~ fail$ ]];then exit;fi
cd ..
\n"""

python_from_bash = """#---execute python step
python -c "execfile('./amx/header');
try: COMMAND;
except Exception,e:
	print str(e);
	traceback.print_exc();
	print 'fail';"
go=$(tail ROOTDIR/log-script-master)
if [[ "$go" =~ fail$ ]];then exit;fi
\n"""

script_rename_rundirs = """
if re.match('^(y|Y)',raw_input('%s (y/N)'%msg)) != None:
	for key,val in rundir_names.items(): shutil.move(key,val)
"""

#---BASH SCRIPT GENERATOR
#-------------------------------------------------------------------------------------------------------------

#---wrapper for regex substitutions below
def multiresub(switches,text):
	return re.compile("(%s)" % "|".join(map(re.escape,switches.keys()))).sub(
		lambda mo: switches[mo.string[mo.start():mo.end()]],text) 

#---amx procedure details
script_dict = {
	'cgmd-bilayer':{
		'prep':[prepare_equil_sim[0]+\
			"sed -i 's/STEPSTRING.*/STEPSTRING=\"npt\"/g' $step_equilibration/settings.sh"]+\
			prepare_equil_sim[1:],
		'steps':{
			'step_monolayer':'s01-build-lipidgrid',
			'step_build':'s02-build-bilayer',
			'step_equilibration':'s03-equil',
			'step_simulation':'s04-sim',
			'input_files':'cgmd-bilayer-equil',
			'mdp_look_string':'bilayer_construction_settings,cgmd',
			'specs_file':r'inputs\\/input_specs_bilayer.py',
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'s01-build-lipidgrid',
				'COMMAND':'MonolayerGrids(rootdir=\'s01-build-lipidgrid\')',
				}),python_from_bash),
			multiresub(dict({
				'ROOTDIR':'s02-build-bilayer',
				'COMMAND':'Bilayer(rootdir=\'s02-build-bilayer\',previous_dir=\'s01-build-lipidgrid\')',
				}),python_from_bash),
			call_equil,
			call_sim,
			],
		},
	'cgmd-bilayer-sculpt':{
		'prep':[multiresub(dict({
			'general-equil':'flexible-equil',
			'general-sim':'flexible-sim',
			'equilibration':'equilibration_static'}),
			'\n'.join(prepare_equil_sim[:1]))]+\
			[multiresub(dict({
			'general-equil':'flexible-equil',
			'general-sim':'flexible-sim',
			'input_files':'input_files2',
			'step_build':'step_restrain'}),
			'\n'.join(prepare_equil_sim))],
		'steps':{
			'step_build':'s01-build-bilayer',
			'step_equilibration_static':'s02-equil',
			'step_equilibration':'s04-equil',
			'step_restrain':'s03-restrain',
			'step_simulation':'s05-sim',
			'input_files':'cgmd-bilayer-sculpt',
			'input_files2':'cgmd-bilayer-sculpt-equil',
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'s01-build-bilayer',
				'COMMAND':'BilayerSculpted(rootdir=\'s01-build-bilayer\')',
				}),python_from_bash),
			multiresub(dict({
				'step_equilibration':'step_equilibration_static'}),
				call_equil),
			multiresub(dict({
				'ROOTDIR':'s03-restrain',
				'COMMAND':'BilayerSculptedFixed(rootdir=\'s03-restrain\',previous_dir=\'s02-equil\')',
				}),python_from_bash),
			call_equil,
			call_sim,
			],
		},
	'aamd-bilayer':{
		'prep':prepare_equil_sim,
		'steps':{
			'step_monolayer':'s1-build-lipidgrid',
			'step_build':'s02-build-bilayer',
			'step_equilibration':'s03-equil',
			'step_simulation':'s04-sim',
			'input_files':'aamd-bilayer-equil',
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'s01-build-lipidgrid',
				'COMMAND':'MonolayerGrids(rootdir=\'s01-build-lipidgrid\')',
				}),python_from_bash),
			multiresub(dict({
				'ROOTDIR':'s02-build-bilayer',
				'COMMAND':'Bilayer(rootdir=\'s02-build-bilayer\',previous_dir=\'s01-build-lipidgrid\')',
				}),python_from_bash),
			call_equil,
			call_sim,
			],
		},
	'aamd-protein':{
		'prep':[prepare_equil_sim[0]+\
			"sed -i 's/STEPSTRING.*/STEPSTRING=\"nvt npt\"/g' $step_equilibration/settings.sh"]+\
			prepare_equil_sim[1:],
		'steps':{
			'step_build':'s01-build-protein-water',
			'step_equilibration':'s02-equil',
			'step_simulation':'s03-sim',
			'input_files':'aamd-protein-equil',
			'detect_previous_step':None,
			'mdp_look_string':'protein_construction_settings,aamd',
			'specs_file':r'inputs\\/input_specs_protein.py',
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'$step_build',
				'COMMAND':'ProteinWater(rootdir=\'$step_build\')',
				}),python_from_bash),
			call_equil,
			call_sim,		
			],
		},
	'cgmd-protein':{
		'prep':[prepare_equil_sim[0]+\
			"sed -i 's/STEPSTRING.*/STEPSTRING=\"nvt npt\"/g' $step_equilibration/settings.sh"]+\
			prepare_equil_sim[1:],
		'steps':{
			'step_build':'s01-build-protein-water',
			'step_equilibration':'s02-equil',
			'step_simulation':'s03-sim',
			'input_files':'cgmd-protein-equil',
			'mdp_look_string':'protein_construction_settings,cgmd',
			'specs_file':r'inputs\\/input_specs_protein.py',
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'s01-build-protein-water',
				'COMMAND':'ProteinWater(rootdir=\'$step_build\')',
				}),python_from_bash),
			call_equil,
			call_sim,		
			],
		},
	'protein-homology':{
		'prep':[],
		'steps':{
			'step_homology':'s01-homology',
			'input_files':'aamd-protein-homology',
			},
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'s01-homology',
				'COMMAND':'ProteinHomology(rootdir=\'s01-homology\')',
				}),python_from_bash),
			'cd $step_homology;./script-best-models.py;cd ..',
			],
		},
	'restart':{
		'prep':prepare_restart,#+\
			#["sed -i 's/use_gpu.*/use_gpu=\"gpu\"/g' $step_simulation/settings.sh"],
		'steps':{
			'step_simulation':'s01-restart',
			'detect_previous_step':None,
			},
		'continue':True,
		'sequence':[
			call_sim_restart,
			],
		},
	'rescript':{
		'prep':prepare_rescript,
		'steps':{
			'detect_previous_step':None,
			'step_simulation':'s01-restart',
			},
		'sequence':[
			call_sim_rescript,
			],
		},
	'multiply':{
		'prep':prepare_multiply,
		'steps':{
			'step_simulation':'s01-multiply',
			'detect_previous_step':None,
			},
		'continue':True,
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'$step_simulation',
				'COMMAND':'Multiply(rootdir=\'$step_simulation\',previous_dir=\'$previus_step\','+\
					'nx=\'$nx\',ny=\'$ny\',nz=\'$nz\')',
				}),python_from_bash),
			call_sim_restart,
			call_sim,
			],
		},
	'cgmd-protein-bilayer':{
		'prep':[prepare_equil_sim[0]+\
			"sed -i 's/STEPSTRING.*/STEPSTRING=\"npt\"/g' $step_equilibration/settings.sh"]+\
			prepare_equil_sim[1:],
		'steps':{
			'step_build':'s01-protein-bilayer',
			'input_files':'cgmd-protein-bilayer',
			'step_equilibration':'s02-equil',
			'step_simulation':'s03-sim',
			},
		'sequence':[
			multiresub(dict({
				'ROOTDIR':'$step_build',
				'COMMAND':'ProteinBilayer(rootdir=\'$step_build\')',
				}),python_from_bash),
			call_equil,
			call_sim,
			],
		},
	}

#---SYSTEM CONFIGURATION
#-------------------------------------------------------------------------------------------------------------

#---system defaults are set here and ~/.automacs.py adds to these files so add extra settings there
#---see sources/scripts/example-hidden-automacs.py for custom configuration
valid_hostnames = {}
default_proc_specs = {}
gmx_suffixes = {}


#!/usr/bin/python

#---CLUSTER HEADERS
#-------------------------------------------------------------------------------------------------------------

#---hostname-to-architecture dictionary
'''
The keys in valid_hostnames are single word strings excluding punctuation which can be mathced to the true
true hostname. For example, if $HOSTNAME is likely to be kraken.school.login2 then just use "kraken". This
dictionary also keeps track of the available architectures for each hostname.
'''
#---here the hostname is a single word excluding punctuation which can be matched to the true hostname
#---note that the first element in the corresponding list is the default architecture
valid_hostnames = {
	'compbio':['opterons','opterons_gpu','xeons'][1],
	'walnut':None,
	'tobias':None,
	}

#---header file definitions
#---note the variable naming must be cluster_header_hostname_architecture

cluster_header_compbio_opterons = \
"""#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=96:00:00
#PBS -j eo 
#PBS -q opterons
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
"""

cluster_header_compbio_xeons = \
"""#!/bin/bash
#PBS -l nodes=1:ppn=2,walltime=96:00:00
#PBS -j eo 
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
"""

cluster_header_compbio_opterons_scratch = [
"""#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=96:00:00
#PBS -j eo 
#PBS -q opterons
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
jobid=`echo $PBS_JOBID|cut -f1 -d '.'`
rundir="/scratch/job-$jobid"
echo "Running on scratch in "$rundir
mkdir $rundir
cp -rv * $rundir
cd $rundir
""",
"""
mv -f * $PBS_O_WORKDIR
cd /scratch
rmdir $rundir
"""]

cluster_header_compbio_xeons_scratch = [
"""#!/bin/bash
#PBS -l nodes=1:ppn=2,walltime=96:00:00
#PBS -j eo 
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
jobid=`echo $PBS_JOBID|cut -f1 -d '.'`
rundir="/scratch/job-$jobid"
echo "Running on scratch in "$rundir
mkdir $rundir
cp -rv * $rundir
cd $rundir
""",
"""
mv -f * $PBS_O_WORKDIR
cd /scratch
rmdir $rundir
"""]

cluster_header_tobias = \
"""#!/bin/bash
#PBS -l nodes=1:ppn=8,walltime=24:00:00
#PBS -j eo
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
"""

cluster_header_walnut = \
"""#!/bin/bash
#PBS -l nodes=1:ppn=32,walltime=24:00:00,pmem=1500mb
#PBS -j eo
#PBS -q long
#PBS -N gmxjob
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
"""

cluster_header_walnut_scratch = [
"""#!/bin/bash
#PBS -l nodes=1:ppn=2,walltime=24:00:00,pmem=1500mb
#PBS -j eo 
#PBS -N gmxjob
#PBS -q long 
echo "Job started on `hostname` at `date`"
cd $PBS_O_WORKDIR
function cleanup {
	cd /scratch-local
	cp -arv $rundir/* $PBS_O_WORKDIR/
	rm -rf $rundir
}
trap cleanup EXIT
jobid=`echo $PBS_JOBID|cut -f1 -d '.'`
rundir="/scratch-local/job-$jobid"
echo "Running on scratch in "$rundir
mkdir $rundir
rsync -avi --files-from=$PBS_O_WORKDIR/upload-rsync-list.txt ./ $rundir
cd $rundir
""",
"""
exit
"""]

#---formalize the collection of scripts to avoid using globals
script_repo = {
	'cluster_header_compbio_opterons_gpu':cluster_header_compbio_opterons,
	'cluster_header_compbio_opterons':cluster_header_compbio_opterons,
	'cluster_header_compbio_opterons_scratch':cluster_header_compbio_opterons_scratch,
	'cluster_header_compbio_xeons':cluster_header_compbio_xeons,
	'cluster_header_compbio_xeons_scratch':cluster_header_compbio_xeons_scratch,
	'cluster_header_tobias':cluster_header_tobias,
	'cluster_header_walnut':cluster_header_walnut,
	'cluster_header_walnut_scratch':cluster_header_walnut_scratch,
	}

"""
HOW TO ADD CLUSTER SPECS
	1. Add the header string/list to script_repo
	2. Add default specifications to default_proc_specs
	3. Add the key you used valid in_default_proc specs to_hostnames with a regex-able HOSTNAME identifier
	4. Add the key and a suffix to gmx_suffixes if necesary
	4. Add the key and a suffix to gmx_overrides if necesary
"""

#---FILE REGEXES
#-------------------------------------------------------------------------------------------------------------

#---regex list for files to remove
patlist = ['\.?\/?.+\.'+i+'$' for i in 
	['itp','top','mdp','tpr','xtc','trr','gro','edr','log','cpt','ndx',
		'dat','pdb','jpeg','jpg','pl','sh','png','ali','py','txt']]+\
	['^gmxpaths','^gmxcalls','^gmxjob','^cluster-','^\#.+\#$','^script-','^log-','^em-all-','^step-']
	
#---ignore reset delete candidates 
whitelist = ['^\.?\/?(docs|amx|sources/|inputs|controller)','^\.*\/*\.[^\/]','controller']

#---all folders are deleted only when empty except if they match the folder delete regex
folder_delete = ['^\.?\/?.+(homology)']

#---DOCUMENTATION
#-------------------------------------------------------------------------------------------------------------

#---documentation page
document_location = 'file://'+os.path.abspath(os.path.curdir)+'/docs/_build/html/index.html'

#---RUN SPECIFICATIONS
#-------------------------------------------------------------------------------------------------------------

#---default number of nodes, processors per node, and walltime
#---note the module item holds bash commands to set paths for gromacs utilities 
default_proc_specs = {
	'compbio_xeons':
		{'nnodes':4,'ppn':2,'walltime':48,
		'module':'module load gromacs-gcc',
		'scratch':False},
	'compbio_opterons':
		{'nodes':1,'ppn':16,'walltime':96,
		'module':'module load gromacs-gcc',
		'scratch':False},
	'compbio_opterons_gpu':
		{'nodes':1,'ppn':16,'walltime':96,
		'module':'module load gromacs-gcc-cuda',
		'scratch':False},
	'walnut':
		{'nodes':1,'ppn':32,'walltime':24,'pmem':'1500mb',
		'module':'module load gromacs/4.6.7-icc-single',
		'scratch':True},
	'tobias':
		{'nodes':1,'ppn':8,'walltime':24,'scratch':False,
		'module':'export PATH=$PATH:/usr/local/gromacs/bin/:/usr/local/bin/'},
	}
	
#---gromacs paths
standard_gromacs_commands = [
	'mdrun','grompp','tpbconv','editconf','genbox','make_ndx','genion',
	'trjconv','gmxcheck','pdb2gmx','genconf',
	]

#---system-specific suffixes to the gromacs utilities
gmx_suffixes = {
	'compbio_xeons':'_mpi',
	'compbio_opterons':'_mpi',
	'compbio_opterons_gpu':'_mpi',
	'walnut':'_mpi',
	}

#---system-specific commands to substitute for standard_gromacs_commands
#---note some commands require a number of processors NPROCS which is substituted by ./controller make
gmx_overrides = {
	'local':{'mdrun':'mdrun -nt 4',},
	'tobias':{'mdrun':'mdrun -nt 8',},
	'compbio_xeons':{'mdrun':'mpirun -np NPROCS mdrun_mpi',},
	'compbio_opterons':{'mdrun':'mpirun -np NPROCS mdrun_mpi',},
	'walnut':{'mdrun':'mpirun -np NPROCS mdrun_mpi',},
	}

#---paths to extra tools
#---set paths to DSSP executable and martinize.py for MARTINI protein simulations from scratch
tool_paths = {
	'dssp':'~/libs/dssp-2.0.4-linux-amd64',
	'martinize':'~/libs/martinize.py',
	'modeller':'mod9.14',
	'vmd':'vmd',
	}


